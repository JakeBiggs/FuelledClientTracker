@page "/insights"

@using Fuelled.ClientTracker.Services
@using Fuelled.ClientTracker.Models
@using ChartJs.Blazor
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@using System.Drawing

@inject ClientService ClientService

<PageTitle>Data Insights</PageTitle>

<h1>Data Insights</h1>

<div class="row mb-4">
    <div class="col-md-4">
        <label for="insight-select" class="form-label"><strong>Select Metric:</strong></label>
        <select id="insight-select" class="form-select" @onchange="OnMetricChanged">
            <option value="OnboardingStage">Onboarding Stage Distribution</option>
            <option value="PolicyType">Policy Type Distribution</option>
        </select>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <ul class="list-group">
            @foreach (var entry in chartData.OrderByDescending(v => v.Value))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @entry.Key
                    <span class="badge bg-primary rounded-pill">@entry.Value</span>
                </li>
            }
        </ul>
    </div>
    <div class="col-md-8">
        @if (_pieConfig != null)
        {
            <Chart Config="_pieConfig" @ref="_pieChart"></Chart>
        }
        else
        {
            <p>Loading chart...</p>
        }
    </div>
</div>

@code {
    private List<Client>? clients;
    private string selectedMetric = "OnboardingStage";

    private Dictionary<string, int> chartData = new();
    private PieConfig? _pieConfig;
    private ChartJs.Blazor.Chart? _pieChart;
    //tried to for some nice fuelled brand colours
    private readonly List<string> _colorPalette = new() { "#ff66c5", "#2b2b2b", "#e6e3db", "#ff99d6", "#888888" };

    protected override async Task OnInitializedAsync()
    {
        _pieConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = true }
            }
        };

        clients = await ClientService.GetClientsAsync();


        UpdateChartData();

    }

    private async Task OnMetricChanged(ChangeEventArgs e)
    {
        selectedMetric = e.Value?.ToString() ?? "OnboardingStage";
        UpdateChartData();
        if (_pieChart != null)
        {
            await _pieChart.Update();
        }
    }

    private void UpdateChartData()
    {
        if (clients == null || _pieConfig == null) return;

        string title;

        switch (selectedMetric)
        {
            case "OnboardingStage":
                title = "Onboarding Stage Distribution";
                chartData = clients.GroupBy(c => c.OnboardingStage.ToString()).ToDictionary(g => g.Key, g => g.Count());
                break;
            case "PolicyType":
                title = "Distribution of Policy Types";
                chartData = clients.Where(c => c.PolicyTypes != null).SelectMany(c => c.PolicyTypes).GroupBy(p => p).ToDictionary(g =>
                g.Key, g => g.Count());
                break;
            default:
                return;
        }

        _pieConfig.Options.Title.Text = title;
        _pieConfig.Data.Labels.Clear();
        _pieConfig.Data.Datasets.Clear();

        var dataset = new PieDataset<int>(chartData.Values.ToList())
        {
            //BackgroundColor = chartData.Keys.Select(k => GetRandomColor()).ToArray()

            // loop through the color palette if ran out
            BackgroundColor = chartData.Keys.Select((key, index) => _colorPalette[index % _colorPalette.Count]).ToArray()
        };

        foreach (var key in chartData.Keys)
        {
            _pieConfig.Data.Labels.Add(key);
        }

        _pieConfig.Data.Datasets.Add(dataset);

    }

    private string GetRandomColor()
    {
        var r = new Random();
        return ColorUtil.FromDrawingColor(Color.FromArgb(200, r.Next(50, 230), r.Next(50, 230), r.Next(50, 230)));
    }
}