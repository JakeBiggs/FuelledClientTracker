@page "/eco-tracker"

@using Fuelled.ClientTracker.Services
@using Fuelled.ClientTracker.Models

@inject ClientService ClientService;


<h1>Eco Tracker</h1>
<div class="alert alert-info">
    This page is under construction. Please check back later for updates.
</div>

<div class="mb-3">
    <strong>Clients:</strong>
    <InputSelect id="clientSelector" class="form-select mb-3" @bind-Value="selectedClientIndex">
        <option value="-1" disabled>Select a client</option>
        @for (int i = 0; i < revenueData.Count; i++)
        {
            <option value="@i">@($"Client {i + 1} - Revenue: ${revenueData[i]}")</option>
        }
    </InputSelect>
</div>

<div class="mb-3">
    <p><strong>Estimated Trees Planted:</strong> @(selectedClientIndex != -1 ?
                calculateTrees(selectedClientIndex).ToString() :
                "N/A")</p>
</div>

@code {

    private List<Client>? clients;
    private int selectedClientIndex = -1; // So i can add a default select a client (maybe chaneg before interview)
    private List<float> revenueData = new List<float> { 1000, 1500, 2000, 2500, 3000 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clients = await ClientService.GetClientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching clients: {ex.Message}");
        }
    }


    //private float calculateTrees(Client client)
    private float calculateTrees(int i)
    {
        // Greenspark charges 45 cents per tree planted according to google
        //float treeMoney = client.Revenue * 0.01f; //1% of revenue committed to carbon offsetting
        float treeMoney = revenueData[i] * 0.01f; //1% of revenue committed to carbon offsetting
        int trees = (int)(treeMoney / 0.45f); //45 cents per tree
        return trees;
    }
}
