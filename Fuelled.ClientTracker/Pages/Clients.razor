@page "/clients"
@using Fuelled.ClientTracker.Services
@using Fuelled.ClientTracker.Models
@using System.Reflection.Metadata.Ecma335;


@inject ClientService ClientService
@inject NavigationManager NavigationManager


<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Clients</h3>
    <button class="btn btn-primary" @onclick="GoToAddClientPage">
        <span class="bi bi-plus-circle-fill" aria-hidden="true"></span> New Client
    </button>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Company Name</th>
            <th>Email</th>
            <th>Onboarding Stage</th>
            <th>Renewal Date</th>
        </tr>
    </thead>

    <tbody>
        @if (clients == null)
        {
            <tr>
                <td colspan="4">Failed to load clients.</td>
            </tr>
        }
        else if (!clients.Any())
        {
            <tr>
                <td colspan="4">No clients found.</td>
            </tr>
        }
        else
        {
            @foreach (var client in clients)
            {
                <tr @onclick="() => ToggleExpanded(client.Id)">
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td class="@GetOnboardingStageClass(client.OnboardingStage)">
                        @GetOnboardingStageString(client.OnboardingStage)</td>
                    <td>@(client.RenewalDate.HasValue? client.RenewalDate.Value.ToShortDateString() : "N/A")</td>
                </tr>

                @if (ExpandedClientId == client.Id)
                {
                    <tr class="table-secondary">
                        @if (client.PolicyTypes.Count == 0)
                        {
                            <td colspan="4"><strong>No policies found for this client.</strong></td>
                        }
                        else
                        {
                            <td colspan="4"><strong>Current Policies:</strong></td>
                        }
                    </tr>
                    @for (int i = 0; i < client.PolicyTypes.Count; i++)
                    {
                        <tr class="table-secondary">
                            <td colspan="4">

                                <div>
                                    <strong>Policy @(i + 1):</strong> @client.PolicyTypes[i] <br>
                                </div>
                            </td>
                        </tr>
                    }
                    <tr class="table-light">
                        <td colspan="4" class="text-end">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewClient(client.Id)">
                                View / Edit Details
                            </button>
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code {
    private List<Client>? clients;
    private int? ExpandedClientId = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clients = await ClientService.GetClientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching clients: {ex.Message}");
        }
    }

    void ToggleExpanded(int clientId)
    {
        if (ExpandedClientId == clientId)
        {
            ExpandedClientId = null; //collapse
        }
        else
        {
            ExpandedClientId = clientId; //expand
        }

    }

    void ViewClient(int clientId)
    {
        NavigationManager.NavigateTo($"/client/{clientId}");
    }

    private string GetOnboardingStageClass(OnboardingStage stage)
    {
        return stage switch
        {
            OnboardingStage.NotStarted => "table-danger", // Red
            OnboardingStage.InProgress => "table-warning", // Orange
            OnboardingStage.Completed => "table-success", // Green
            _ => "" //no colour
        };
    }

    private string GetOnboardingStageString(OnboardingStage stage)
    {
        string stageText;
        switch (stage)
        {
            case OnboardingStage.NotStarted:
                stageText = "Not Started";
                break;
            case OnboardingStage.InProgress:
                stageText = "In Progress";
                break;
            case OnboardingStage.Completed:
                stageText = "Completed";
                break;
            default:
                stageText = "Unknown";
                break;
        }
        return stageText;
    }

    private void GoToAddClientPage()
    {
        NavigationManager.NavigateTo("/add-client");
    }
}