@page "/client/{ClientId:int}"
@using Fuelled.ClientTracker.Services
@using Fuelled.ClientTracker.Models
@using Fuelled.ClientTracker.Components
@inject ClientService ClientService
@inject NavigationManager NavigationManager

<h3>Client Details</h3>

@if (client == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@client" OnValidSubmit="@HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Company Name</label>
            <InputText class="form-control" @bind-Value="client.Name" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText type="email" class="form-control" @bind-Value="client.Email" />
        </div>

        <div class="mb-3">
            <label class="form-label">Onboarding Stage</label>
            <InputSelect class="form-select" @bind-Value="client.OnboardingStage">
                @foreach (var stage in Enum.GetValues(typeof(OnboardingStage)))
                {
                    <option value="@stage">@stage</option>
                }
            </InputSelect>
        </div>
        
        <div class="mb-3">
            <label class="form-label">Policy Types</label>
            @foreach (var policy in availablePolicies)
            {
                <div class="form-check">
                    <InputCheckbox id="@policy" class="form-check-input" @bind-Value="selectedPolicies[policy]" />
                    <label for="@policy" class="form-check-label">@policy</label>
                </div>
            }
        </div>

        <button type="submit" class="btn btn-success">Update Client</button>
        
         <button type="button" class="btn btn-danger" @onclick="() => showDeleteConfirmation = true">Delete Client</button>
        
        <button type="button" class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo("/clients"))">Back to List</button>
    </EditForm>
}

<ConfirmationBox IsVisible="showDeleteConfirmation"
                    Title="Delete Client"
                    Message="@($"Are you sure you want to delete {client?.Name}?")"
                    OnConfirmation="HandleDelete" />


@code {
    [Parameter]
    public int ClientId { get; set; }

    private Client? client;
    private List<string> availablePolicies = new() { "Employers Liability", "Public/Products Liability", "Professional Indemnity", "Cyber & Data", "Directors & Officers", "Commerical Property" };
    private Dictionary<string, bool> selectedPolicies = new();
    private bool showDeleteConfirmation = false;
    protected override async Task OnInitializedAsync()
    {
        client = await ClientService.GetClientByIdAsync(ClientId);
        if (client != null)
        {
            foreach (var policy in availablePolicies)
            {
                selectedPolicies[policy] = client.PolicyTypes.Contains(policy);
            }
        }
    }

    private async Task HandleUpdate()
    {
        if (client != null)
        {
            client.PolicyTypes = selectedPolicies.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
            await ClientService.UpdateClientAsync(client);
            NavigationManager.NavigateTo("/clients");
        }
    }

    private async Task HandleDelete(bool confirmed)
    {
        showDeleteConfirmation = false; // Hide the dialog

        if (confirmed && client != null)
        {
            await ClientService.DeleteClientAsync(client.Id);
            NavigationManager.NavigateTo("/clients");
        }
    }
}